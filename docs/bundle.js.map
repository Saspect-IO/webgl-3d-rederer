{"version":3,"sources":["webpack://qrius-engine-webgl/./src/assets/resources/formula_1/textures/formula_1.png","webpack://qrius-engine-webgl/./src/assets/resources/formula_1/source/formula_1.obj","webpack://qrius-engine-webgl/./src/app/app.ts","webpack://qrius-engine-webgl/./src/app/components/core/appLoader.ts","webpack://qrius-engine-webgl/./src/core/Textures/texture.ts","webpack://qrius-engine-webgl/./src/core/camera.ts","webpack://qrius-engine-webgl/./src/core/geometry.ts","webpack://qrius-engine-webgl/./src/core/glContext.ts","webpack://qrius-engine-webgl/./src/core/light.ts","webpack://qrius-engine-webgl/./src/core/math.ts","webpack://qrius-engine-webgl/./src/core/model.ts","webpack://qrius-engine-webgl/./src/core/objLoader.ts","webpack://qrius-engine-webgl/./src/core/primitives/grid/infiniteGrid.ts","webpack://qrius-engine-webgl/./src/core/scene.ts","webpack://qrius-engine-webgl/./src/core/shaderProgram.ts","webpack://qrius-engine-webgl/./src/core/transformation.ts","webpack://qrius-engine-webgl/./src/core/vbuffer.ts","webpack://qrius-engine-webgl/./src/main.ts","webpack://qrius-engine-webgl/./src/modules/global_constants.ts","webpack://qrius-engine-webgl/./src/modules/index.ts","webpack://qrius-engine-webgl/./src/modules/shaderProgram.ts","webpack://qrius-engine-webgl/./src/modules/utils.ts","webpack://qrius-engine-webgl/webpack/bootstrap","webpack://qrius-engine-webgl/webpack/runtime/define property getters","webpack://qrius-engine-webgl/webpack/runtime/global","webpack://qrius-engine-webgl/webpack/runtime/hasOwnProperty shorthand","webpack://qrius-engine-webgl/webpack/runtime/make namespace object","webpack://qrius-engine-webgl/webpack/runtime/publicPath","webpack://qrius-engine-webgl/webpack/startup"],"names":["AppLoader","HTMLElement","super","shadowRoot","this","attachShadow","mode","innerHTML","appLoaderElem","children","document","getElementById","classList","add","customElements","define","Texture","gl","image","texture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_MAG_FILTER","LINEAR","generateMipmap","url","Image","src","decode","Camera","fov","CameraSettings","FIELD_OF_VIEW","near","NEAR_PLANE","far","FAR_PLANE","perspectiveProjection","Float32Array","orthoProjection","ratio","canvas","width","height","left","right","top","bottom","Matrix4","perspective","ortho","transform","viewMatrix","MODE_ORBIT","v","updateViewMatrix","position","x","y","z","up","forward","MODE_FREE","modelMatrix","resetMat","vtranslate","rotateX","degToRad","rotation","rotateY","updateDirection","invert","matrix","CameraController","camera","box","getBoundingClientRect","rotateRate","CameraControlsSettings","ROTATION_RATE","panRate","PAN_RATE","zoomRate","ZOOM_RATE","offsetX","offsetY","initX","initY","prevX","prevY","onUpHandler","e","onMouseUp","onMoveHandler","onMouseMove","onTouchEndHandler","onTouchEnd","onTouchMoveHandler","onTouchMove","addEventListener","MOUSE_DOWN","onMouseDown","MOUSE_WHEEL","onMouseWheel","TOUCH_START","onTouchStart","TOUCH_MOVE","pageX","pageY","MOUSE_UP","MOUSE_MOVE","touches","clientX","clientY","TOUCH_END","removeEventListener","delta","Math","max","min","wheelDelta","detail","panZ","dx","dy","shiftKey","panX","panY","mesh","scale","set","updateMatrix","WEBGL_CANVAS_ID","rgb_32_bit","alpha","getContext","ProgramEntrySettings","WEBGL_CONTEXT","alert","WEBGL_CONTEXT_ERROR_MESSAGE","cullFace","BACK","frontFace","CCW","enable","DEPTH_TEST","CULL_FACE","depthFunc","LEQUAL","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","w","h","style","viewport","depthTexture","bindFramebuffer","FRAMEBUFFER","depthFramebuffer","depthTextureSize","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","wp","hp","setSize","window","innerWidth","innerHeight","red","green","blue","clearColor","lightPosition","lightColor","normalizeRGB","ambientLightColor","specularColor","specularFactor","shininess","program","uniform3fv","lightPositionLoc","uniform4fv","lightColorLoc","ambientLightColorLoc","specularColorLoc","uniform1f","specularFactorLoc","shininessLoc","Vector3","undefined","sqrt","mag","magnitude","identity","translate","rad","rotateZ","vec3","i","length","a","out","fovy","aspect","f","tan","nf","lr","bt","cameraPosition","target","dst","zAxis","normalize","subtractVectors","xAxis","cross","yAxis","b","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","mat4","c1r1","c2r1","c3r1","c4r1","c1r2","c2r2","c3r2","c4r2","c1r3","c2r3","c3r3","c4r3","m","b0","b1","b2","b3","s","sin","c","cos","axis","t","b12","b20","b21","b22","len","abs","mat","ModelShader","sceneViewCamera","lightViewCamera","shaderProgram","activateShader","positionLoc","getAttribLocation","GLSetttings","ATTR_POSITION_NAME","texCoordLoc","ATTR_UV_NAME","normalLoc","ATTR_NORMAL_NAME","modelMatrixLoc","getUniformLocation","UNI_MODEL_MAT","perspectiveMatrixLoc","UNI_PROJECTION_MAT","cameraViewMatrixLoc","UNI_CAMERA_VIEW_MAT","projectedTextureLoc","UNI_PROJECTED_TEXTURE","textureMatrixLoc","UNI_TEXTURE_MAT","UNI_LIGHT_AMBIENT","UNI_LIGHT_POSITION","cameraPositionLoc","UNI_CAMERA_POSITION","UNI_CAMERA_SHININESS","UNI_LIGHT_COLOR","UNI_SPECULAR_COLOR","UNI_SPECULAR_FACTOR","deactivateShader","perspectiveProjectionMatrix","orthoProjectionMatrix","model","getLightWorldMatrix","uniformMatrix4fv","getModelMatrix","getFloatArray","lookAt","lightWorldMatrix","textureMatrix","mult","inverted","Model","vertices","createMesh","vertexCount","positions","BUFFER_TYPE_ARRAY","normals","uvs","drawMode","TRIANGLES","bindToAttribute","DEFAULT_STRIDE","DEFAULT_OFFSET","ObjLoader","surfaces","POSITION","ObjTypes","V","NORMAL","VN","UV","VT","SURFACE","F","lines","split","NEW_LINE","item","lineItems","trim","SPACE","type","push","Vec3Struct","parseFloat","Vec2Struct","isQuad","shouldExit","size","part","BACKSLASH","parseInt","uv","normal","VertexStruct","triagle1","slice","triangle2","SurfaceStruct","response","fetch","data","text","parseOBJ","result","forEach","surface","vertex","InfiniteGridShader","uColorLoc","UNI_COLOR","viewModelMatrix","InfiniteGrid","verts","strideLen","BYTES_PER_ELEMENT","GRID_VECTOR_SIZE","appLoader","glContext","wh","fitScreen","setClearColor","light1","loadOBJ","PATH_ASSETS_OBJ","loadTexture","PATH_ASSETS_TEXTURE","infiniteGridShader","infiniteGrid","createGeometry","modelShader","setScale","setRotation","disable","loop","setUniforms","renderModel","preRender","requestAnimationFrame","vsSource","fsSource","vertexShader","fragmentShader","createShader","VERTEX_SHADER","FRAGMENT_SHADER","createShaderProgram","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","Error","detachShader","useProgram","getParameter","CURRENT_PROGRAM","noCulling","doBlending","BLEND","drawArrays","normalMatrix","vscale","normalMat3","transformVec4","count","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","BUFFER_TYPE_ELEMENT_ARRAY","ELEMENT_ARRAY_BUFFER","Uint16Array","deleteBuffer","stride","offset","BUFFER_TYPE_VERTICES","enableVertexAttribArray","vertexAttribPointer","FLOAT","TEXTURE","loadShaders","loadFile","vertexShaderFile","fragmentShaderFile","Promise","all","radToDeg","r","PI","d","val","lerp","norm","rgb_8_bit","errorMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","value","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","replace","p"],"mappings":"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","file":"bundle.js","sourcesContent":["export default __webpack_public_path__ + \"assets/resources/formula_1/textures/formula_1.png\";","export default __webpack_public_path__ + \"assets/resources/formula_1/source/formula_1.obj\";","import Scene from \"@/core/scene\";\r\n\r\nexport default class App{\r\n    constructor(){\r\n        new Scene()\r\n    }\r\n}","export default class AppLoader extends HTMLElement {\r\n    constructor(){\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode:'open'}) as ShadowRoot \r\n        shadowRoot.innerHTML = `\r\n          <style>\r\n              :host-context(.fade-app-loader) {\r\n                visibility: hidden;\r\n                opacity: 0;\r\n                transition: visibility 0.5s, opacity 0.5s linear;\r\n              }\r\n              .lds-ellipsis {\r\n                display: inline-block;\r\n                position: relative;\r\n                width: 80px;\r\n                height: 80px;\r\n                opacity: 0.5;\r\n              }\r\n              .lds-ellipsis div {\r\n                position: absolute;\r\n                top: 33px;\r\n                width: 20px;\r\n                height: 20px;\r\n                border-radius: 50%;\r\n                background: #fff;\r\n                animation-timing-function: cubic-bezier(0, 1, 1, 0);\r\n              }\r\n              .lds-ellipsis div:nth-child(1) {\r\n                left: 0px;\r\n                animation: lds-ellipsis1 0.6s infinite;\r\n              }\r\n              .lds-ellipsis div:nth-child(2) {\r\n                left: 5px;\r\n                animation: lds-ellipsis2 0.6s infinite;\r\n              }\r\n              .lds-ellipsis div:nth-child(3) {\r\n                left: 30px;\r\n                animation: lds-ellipsis2 0.6s infinite;\r\n              }\r\n              .lds-ellipsis div:nth-child(4) {\r\n                left: 60px;\r\n                animation: lds-ellipsis3 0.6s infinite;\r\n              }\r\n              @keyframes lds-ellipsis1 {\r\n                0% {\r\n                  transform: scale(0);\r\n                }\r\n                100% {\r\n                  transform: scale(1);\r\n                }\r\n              }\r\n              @keyframes lds-ellipsis3 {\r\n                0% {\r\n                  transform: scale(1);\r\n                }\r\n                100% {\r\n                  transform: scale(0);\r\n                }\r\n              }\r\n              @keyframes lds-ellipsis2 {\r\n                0% {\r\n                  transform: translate(0, 0);\r\n                }\r\n                100% {\r\n                  transform: translate(24px, 0);\r\n                }\r\n              }\r\n\r\n          </style>\r\n          <div id=\"app-loader\"\r\n              style=\"display: flex;\r\n              opacity: 1;\r\n              justify-content: center;\r\n              align-items: center;\r\n              position: fixed; \r\n              left: 0; \r\n              top: 0; right: \r\n              0; bottom: 0; \r\n              background: rgb(0, 0, 0, 0.4);\">\r\n              <div class=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n          </div>`\r\n        this.appLoaderElem = shadowRoot.children[1] as HTMLElement\r\n    }\r\n\r\n    appLoaderElem:HTMLElement\r\n\r\n    disable (){\r\n      const elem = document.getElementById('app') as HTMLElement \r\n      elem.classList.add('fade-app-loader')\r\n    }\r\n}\r\n\r\ncustomElements.define('app-loader', AppLoader);","export default class Texture {\r\n\r\n    constructor(gl: WebGLRenderingContext, image: HTMLImageElement) {\r\n        const texture = gl.createTexture() as WebGLTexture\r\n        gl.bindTexture(gl.TEXTURE_2D, texture as WebGLTexture)\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image)\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR)\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\r\n        gl.generateMipmap(gl.TEXTURE_2D)\r\n\r\n        this.gl = gl\r\n    }\r\n\r\n    gl: WebGLRenderingContext;\r\n\r\n    // Asynchronously load an image\r\n    static async loadTexture(gl: WebGLRenderingContext, url: string): Promise < Texture > {\r\n        const image = new Image()\r\n        image.src = url\r\n        await image.decode()\r\n        const result = new Texture(gl, image)\r\n        return result\r\n    }\r\n\r\n}","\r\nimport { CameraControlsSettings, CameraSettings, degToRad } from \"@/modules\"\r\nimport { Matrix4 } from \"./math\"\r\nimport Transformation from \"./transformation\"\r\n\r\n//https://github.com/sketchpunk/FunWithWebGL2/tree/master/lesson_006\r\nclass Camera {\r\n  constructor(gl: WebGLRenderingContext, fov: number = CameraSettings.FIELD_OF_VIEW, near: number = CameraSettings.NEAR_PLANE, far: number = CameraSettings.FAR_PLANE) {\r\n\r\n    this.perspectiveProjection = new Float32Array(16)\r\n    this.orthoProjection = new Float32Array(16)\r\n\r\n    const ratio = gl.canvas.width / gl.canvas.height\r\n    const left = - gl.canvas.width / 2\r\n    const right = gl.canvas.width / 2\r\n    const top = gl.canvas.height / 2\r\n    const bottom = - gl.canvas.height / 2\r\n    \r\n    Matrix4.perspective(this.perspectiveProjection, fov, ratio, near, far)\r\n    Matrix4.ortho(this.orthoProjection, left, right, bottom, top, 1, 10)\r\n\r\n    this.transform = new Transformation() //Setup transform to control the position of the camera\r\n    this.viewMatrix = new Float32Array(16) //Cache the matrix that will hold the inverse of the transform.\r\n\r\n    this.mode = Camera.MODE_ORBIT //Set what sort of control mode to use.\r\n  }\r\n\r\n  transform: Transformation\r\n  perspectiveProjection: Float32Array\r\n  orthoProjection: Float32Array\r\n  viewMatrix: Float32Array\r\n  mode: number\r\n\r\n  static MODE_FREE = CameraSettings.MODE_FREE //Allows free movement of position and rotation, basicly first person type of camera\r\n  static MODE_ORBIT = CameraSettings.MODE_ORBIT //Movement is locked to rotate around the origin, Great for 3d editors or a single model viewer\r\n\r\n  panX(v: number) {\r\n    if (this.mode == Camera.MODE_ORBIT) return // Panning on the X Axis is only allowed when in free mode\r\n    this.updateViewMatrix()\r\n    this.transform.position.x += this.transform.right[0] * v\r\n    this.transform.position.y += this.transform.right[1] * v\r\n    this.transform.position.z += this.transform.right[2] * v\r\n  }\r\n\r\n  panY(v: number) {\r\n    this.updateViewMatrix()\r\n    this.transform.position.y += this.transform.up[1] * v\r\n    if (this.mode == Camera.MODE_ORBIT) return //Can only move up and down the y axix in orbit mode\r\n    this.transform.position.x += this.transform.up[0] * v\r\n    this.transform.position.z += this.transform.up[2] * v\r\n  }\r\n\r\n  panZ(v: number) {\r\n    this.updateViewMatrix()\r\n    if (this.mode == Camera.MODE_ORBIT) {\r\n      this.transform.position.z += v //orbit mode does translate after rotate, so only need to set Z, the rotate will handle the rest.\r\n    } else {\r\n      //in freemode to move forward, we need to move based on our forward which is relative to our current rotation\r\n      this.transform.position.x += this.transform.forward[0] * v\r\n      this.transform.position.y += this.transform.forward[1] * v\r\n      this.transform.position.z += this.transform.forward[2] * v\r\n    }\r\n  }\r\n\r\n  //To have different modes of movements, this function handles the view matrix update for the transform object.\r\n  updateViewMatrix() {\r\n    //Optimize camera transform update, no need for scale nor rotateZ\r\n    if (this.mode == Camera.MODE_FREE) {\r\n      this.transform.modelMatrix.resetMat()\r\n        .vtranslate(this.transform.position)\r\n        .rotateX(degToRad(this.transform.rotation.x))\r\n        .rotateY(degToRad(this.transform.rotation.y))\r\n\r\n    } else {\r\n      this.transform.modelMatrix.resetMat()\r\n        .rotateX(degToRad(this.transform.rotation.x))\r\n        .rotateY(degToRad(this.transform.rotation.y))\r\n        .vtranslate(this.transform.position)\r\n    }\r\n\r\n    this.transform.updateDirection()\r\n\r\n    //Cameras work by doing the inverse transformation on all meshes, the camera itself is a lie :)\r\n    Matrix4.invert(this.viewMatrix, this.transform.modelMatrix.matrix)\r\n\r\n    return this.viewMatrix\r\n  }\r\n\r\n}\r\n\r\nclass CameraController {\r\n  constructor(gl: WebGLRenderingContext, camera: Camera) {\r\n    const box = (gl.canvas as HTMLCanvasElement).getBoundingClientRect()\r\n    this.canvas = gl.canvas as HTMLCanvasElement //Need access to the canvas html element, main to access events\r\n    this.camera = camera //Reference to the camera to control\r\n\r\n    this.rotateRate = CameraControlsSettings.ROTATION_RATE  //How fast to rotate, degrees per dragging delta\r\n    this.panRate = CameraControlsSettings.PAN_RATE          //How fast to pan, max unit per dragging delta\r\n    this.zoomRate = CameraControlsSettings.ZOOM_RATE        //How fast to zoom or can be viewed as forward/backward movement\r\n\r\n    this.offsetX = box.left //Help calc global x,y mouse cords.\r\n    this.offsetY = box.top\r\n\r\n    this.initX = 0 //Starting X,Y position on mouse down\r\n    this.initY = 0\r\n    this.prevX = 0 //Previous X,Y position on mouse move\r\n    this.prevY = 0\r\n\r\n\t\tthis.onUpHandler = (e: MouseEvent) => this.onMouseUp()\r\n\t\tthis.onMoveHandler = (e: MouseEvent) => this.onMouseMove(e)\r\n    this.onTouchEndHandler = (e: TouchEvent) => this.onTouchEnd(e)\r\n    this.onTouchMoveHandler = (e: TouchEvent) => this.onTouchMove(e)\r\n\r\n\t\tthis.canvas.addEventListener(CameraControlsSettings.MOUSE_DOWN, (e: MouseEvent) => this.onMouseDown(e))\r\n\t\tthis.canvas.addEventListener(CameraControlsSettings.MOUSE_WHEEL, (e: Event ) => this.onMouseWheel(e))\r\n    this.canvas.addEventListener(CameraControlsSettings.TOUCH_START, (e: TouchEvent ) => this.onTouchStart(e))\t \r\n    this.canvas.addEventListener(CameraControlsSettings.TOUCH_MOVE, (e: TouchEvent ) => this.onTouchMove(e))\r\n  }\r\n\r\n  canvas: HTMLCanvasElement\r\n  camera: Camera\r\n  rotateRate: number         //How fast to rotate, degrees per dragging delta\r\n  panRate: number            //How fast to pan, max unit per dragging delta\r\n  zoomRate: number           //How fast to zoom or can be viewed as forward/backward movement\r\n  offsetX: number            //Help calc global x,y mouse cords.\r\n  offsetY: number\r\n  initX: number              //Starting X,Y position on mouse down\r\n  initY: number\r\n  prevX: number              //Previous X,Y position on mouse move\r\n  prevY: number\r\n  onUpHandler:any\r\n  onMoveHandler:any\r\n  onTouchEndHandler:any\r\n  onTouchMoveHandler:any\r\n\r\n  //Transform mouse x,y cords to something useable by the canvas.\r\n  getMouseVec2(e: MouseEvent) {\r\n    return {\r\n      x: e.pageX - this.offsetX,\r\n      y: e.pageY - this.offsetY\r\n    }\r\n  }\r\n\r\n\r\n  //Begin listening for dragging movement\r\n  onMouseDown(e: MouseEvent) {\r\n    this.initX = this.prevX = e.pageX - this.offsetX\r\n    this.initY = this.prevY = e.pageY - this.offsetY\r\n\r\n    this.canvas.addEventListener(CameraControlsSettings.MOUSE_UP, this.onUpHandler)\r\n    this.canvas.addEventListener(CameraControlsSettings.MOUSE_MOVE, this.onMoveHandler)\r\n  }\r\n\r\n  onTouchStart(e: TouchEvent){\r\n    this.initX = this.prevX = e.touches[0].clientX - this.offsetX\r\n    this.initY = this.prevY = e.touches[0].clientY - this.offsetY\r\n    this.canvas.addEventListener(CameraControlsSettings.TOUCH_END, this.onTouchEndHandler)\r\n    this.canvas.addEventListener(CameraControlsSettings.TOUCH_MOVE, this.onTouchMoveHandler)\r\n  }\r\n\r\n  onMouseUp() {\r\n    this.canvas.removeEventListener(CameraControlsSettings.MOUSE_UP, this.onUpHandler)\r\n    this.canvas.removeEventListener(CameraControlsSettings.MOUSE_MOVE, this.onMoveHandler)\r\n  }\r\n\r\n  onTouchEnd(e: TouchEvent){\r\n    this.canvas.removeEventListener(CameraControlsSettings.TOUCH_END, this.onTouchEndHandler)\r\n    this.canvas.removeEventListener(CameraControlsSettings.TOUCH_MOVE, this.onTouchMoveHandler)\r\n  }\r\n\r\n  onMouseWheel(e: any) {\r\n    let delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail))) //Try to map wheel movement to a number between -1 and 1\r\n    this.camera.panZ(-delta * (this.zoomRate / this.canvas.height))    //Keep the movement speed the same, no matter the height diff\r\n  }\r\n\r\n  onMouseMove(e: MouseEvent) {\r\n    let x = e.pageX - this.offsetX, //Get X,y where the canvas's position is origin.\r\n      y = e.pageY - this.offsetY,\r\n      dx = x - this.prevX,          //Difference since last mouse move\r\n      dy = y - this.prevY\r\n\r\n    //When shift is being helt down, we pan around else we rotate.\r\n    if (!e.shiftKey) {\r\n      this.camera.transform.rotation.y += dx * (this.rotateRate / this.canvas.width)\r\n      this.camera.transform.rotation.x += dy * (this.rotateRate / this.canvas.height)\r\n    } else {\r\n      this.camera.panX(-dx * (this.panRate / this.canvas.width))\r\n      this.camera.panY(dy * (this.panRate / this.canvas.height))\r\n    }\r\n\r\n    this.prevX = x\r\n    this.prevY = y\r\n  }\r\n\r\n  onTouchMove(e: TouchEvent){\r\n    let x = e.touches[0].clientX- this.offsetX,\r\n        y = e.touches[0].clientY - this.offsetY,\r\n        dx = x - this.prevX,         \r\n        dy = y - this.prevY\r\n\r\n      if (!e.shiftKey) {\r\n        this.camera.transform.rotation.y += dx * (this.rotateRate / this.canvas.width)\r\n        this.camera.transform.rotation.x += dy * (this.rotateRate / this.canvas.height)\r\n      } else {\r\n        this.camera.panX(-dx * (this.panRate / this.canvas.width))\r\n        this.camera.panY(dy * (this.panRate / this.canvas.height))\r\n      }\r\n  \r\n      this.prevX = x\r\n      this.prevY = y\r\n  }\r\n\r\n}\r\n\r\nexport {\r\n  Camera,\r\n  CameraController\r\n}","\r\nimport { MeshData } from \"@/entities\"\r\nimport Transformation from \"./transformation\"\r\nexport default class Geometry {\r\n\r\n    constructor( mesh: MeshData) {\r\n\r\n        this.mesh = mesh\r\n        this.transform = new Transformation()\r\n    }\r\n\r\n    mesh: MeshData\r\n    transform: Transformation\r\n\r\n\r\n    setScale(x: number, y: number, z: number) {\r\n        this.transform.scale.set(x, y, z)\r\n        return this\r\n    }\r\n\r\n    setPosition(x: number, y: number, z: number) {\r\n        this.transform.position.set(x, y, z)\r\n        return this\r\n    }\r\n\r\n    setRotation(x: number, y: number, z: number) {\r\n        this.transform.rotation.set(x, y, z)\r\n        return this\r\n    }\r\n\r\n    addScale(x: number, y: number, z: number) {\r\n        this.transform.scale.x += x\r\n        this.transform.scale.y += y\r\n        this.transform.scale.y += y\r\n        return this\r\n    }\r\n\r\n    addPosition(x: number, y: number, z: number) {\r\n        this.transform.position.x += x\r\n        this.transform.position.y += y\r\n        this.transform.position.z += z\r\n        return this\r\n    }\r\n\r\n    addRotation(x: number, y: number, z: number) {\r\n        this.transform.rotation.x += x\r\n        this.transform.rotation.y += y\r\n        this.transform.rotation.z += z\r\n        return this\r\n    }\r\n\r\n    preRender() {\r\n        this.transform.updateMatrix()\r\n        return this\r\n    }\r\n}","import { ProgramEntrySettings } from \"@/modules\"\r\nimport DepthTexture from \"./Textures/depthTexture\"\r\n\r\n\r\nexport default class GLContext {\r\n    constructor(WEBGL_CANVAS_ID: string) {\r\n        const canvas = document.getElementById(WEBGL_CANVAS_ID) as HTMLCanvasElement\r\n        this.gl = canvas.getContext(ProgramEntrySettings.WEBGL_CONTEXT) as WebGLRenderingContext\r\n        this.gl ?? alert(ProgramEntrySettings.WEBGL_CONTEXT_ERROR_MESSAGE)  //user if webgl is not available\r\n        this.gl?.cullFace(this.gl.BACK)\t\t\t\t\t\t\t\t        //Back is also default\r\n        this.gl?.frontFace(this.gl.CCW)\t\t\t\t\t\t\t\t        //Dont really need to set it, its ccw by default.\r\n        this.gl?.enable(this.gl.DEPTH_TEST)\t\t\t\t\t\t\t        //Shouldn't use this, use something else to add depth detection\r\n        this.gl?.enable(this.gl.CULL_FACE)\t\t\t\t\t\t\t        //Cull back face, so only show triangles that are created clockwise\r\n        this.gl?.depthFunc(this.gl.LEQUAL)\t\t\t\t\t\t\t        //Near things obscure far things\r\n        this.gl?.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA)\t//Setup default alpha blending\r\n        this.canvas = canvas\r\n    }\r\n\r\n    gl: WebGLRenderingContext | null = null\r\n    rgb_32_bit = 255\r\n    alpha = 1\r\n    canvas: HTMLCanvasElement\r\n\r\n    setSize(w: number, h: number) {\r\n        //set the size of the canvas, on chrome we need to set it 3 ways to make it work perfectly.\r\n        this.canvas.style.width = w + \"px\"\r\n        this.canvas.style.height = h + \"px\"\r\n        this.canvas.width = w\r\n        this.canvas.height = h\r\n\r\n        //when updating the canvas size, must reset the viewport of the canvas \r\n        //else the resolution webgl renders at will not change\r\n        this.gl?.viewport(0, 0, w, h)\r\n        \r\n        return this\r\n    }\r\n\r\n    depthRender(depthTexture:DepthTexture){\r\n        this.gl?.bindFramebuffer(this.gl?.FRAMEBUFFER, depthTexture.depthFramebuffer)\r\n        this.gl?.viewport(0, 0, depthTexture.depthTextureSize, depthTexture.depthTextureSize)\r\n        this.gl?.clear(this.gl?.COLOR_BUFFER_BIT | this.gl?.DEPTH_BUFFER_BIT);\r\n        return this\r\n    }\r\n\r\n    //Set the size of the canvas to fill a % of the total screen.\r\n    fitScreen(wp: number, hp: number) {\r\n        return this.setSize(window.innerWidth * (wp || 1), window.innerHeight * (hp || 1))\r\n    }\r\n\r\n    setClearColor(red: number, green: number, blue: number, alpha: number = 1) {\r\n        this.gl?.clearColor(red / this.rgb_32_bit, green / this.rgb_32_bit, blue / this.rgb_32_bit, alpha)\r\n        return this\r\n    }\r\n\r\n    clearFramebuffer(){\r\n        this.gl?.bindFramebuffer(this.gl?.FRAMEBUFFER, null)\r\n        return this\r\n    }\r\n\r\n    clear() {\r\n        this.gl?.clear(this.gl?.COLOR_BUFFER_BIT | this.gl?.DEPTH_BUFFER_BIT)\r\n        return this\r\n    }\r\n\r\n    getContext() {\r\n        return this.gl\r\n    }\r\n}","import { normalizeRGB } from \"@/modules\"\r\nimport { Vector3 } from \"./math\"\r\nimport { ModelShader } from \"./model\"\r\n\r\nexport default class Light {\r\n    constructor(\r\n        lightPosition: Vector3,\r\n        lightColor = normalizeRGB({red:201, green:226, blue:255}),\r\n        ambientLightColor = normalizeRGB({red:50, green:50, blue:50}),\r\n        specularColor = normalizeRGB({red:255, green:255, blue:255}),\r\n        specularFactor = 1,\r\n        shininess = 500,\r\n    ) { \r\n        this.lightPosition = lightPosition\r\n        this.lightColor = lightColor\r\n        this.ambientLightColor = ambientLightColor\r\n        this.specularColor = specularColor\r\n        this.specularFactor = specularFactor\r\n        this.shininess = shininess\r\n    }\r\n\r\n    lightPosition: Vector3\r\n    lightColor: Float32Array\r\n    ambientLightColor: Float32Array\r\n    specularColor: Float32Array\r\n    specularFactor: number\r\n    shininess: number\r\n   \r\n\r\n    setUniforms(gl:WebGLRenderingContext, program:ModelShader): void {\r\n        gl.uniform3fv(program.lightPositionLoc, [this.lightPosition.x, this.lightPosition.y, this.lightPosition.z])\r\n        gl.uniform4fv(program.lightColorLoc, this.lightColor)\r\n        gl.uniform4fv(program.ambientLightColorLoc, this.ambientLightColor)\r\n        gl.uniform4fv(program.specularColorLoc, this.specularColor)\r\n        gl.uniform1f(program.specularFactorLoc, this.specularFactor)\r\n        gl.uniform1f(program.shininessLoc, this.shininess)\r\n    }\r\n\r\n}","//###########################################################################################\r\nimport { Vector } from \"@/entities\";\r\n\r\n\r\n//https://github.com/sketchpunk/FunWithWebGL2/tree/master/lesson_006\r\nclass Vector3 {\r\n    constructor(x: number, y: number, z: number) {\r\n        this.x = x || 0.0;\r\n        this.y = y || 0.0;\r\n        this.z = z || 0.0;\r\n    }\r\n\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n\r\n    magnitude(v: Vector = {\r\n        x: 0.0,\r\n        y: 0.0,\r\n        z: 0.0\r\n    }) {\r\n        //Only get the magnitude of this vector\r\n        if (v === undefined) return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n\r\n        //Get magnitude based on another vector\r\n        let x = v.x - this.x,\r\n            y = v.y - this.y,\r\n            z = v.y - this.z;\r\n\r\n        return Math.sqrt(x * x + y * y + z * z);\r\n    }\r\n\r\n    normalize() {\r\n        let mag = this.magnitude();\r\n        this.x /= mag;\r\n        this.y /= mag;\r\n        this.z /= mag;\r\n        return this;\r\n    }\r\n\r\n    set(x: number, y: number, z: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        return this;\r\n    }\r\n\r\n    multiScalar(v: number) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        this.z *= v;\r\n        return this;\r\n    }\r\n\r\n    getArray() {\r\n        return [this.x, this.y, this.z];\r\n    }\r\n\r\n    getFloatArray() {\r\n        return new Float32Array([this.x, this.y, this.z]);\r\n    }\r\n\r\n    clone() {\r\n        return new Vector3(this.x, this.y, this.z);\r\n    }\r\n}\r\n\r\n\r\n//###########################################################################################\r\nclass Matrix4 {\r\n    constructor() {\r\n        this.matrix = Matrix4.identity();\r\n    }\r\n\r\n    matrix: Float32Array;\r\n\r\n    //....................................................................\r\n    //Transformations Methods\r\n    vtranslate(v: Vector) {\r\n        Matrix4.translate(this.matrix, v.x, v.y, v.z);\r\n        return this;\r\n    }\r\n    translate(x: number, y: number, z: number) {\r\n        Matrix4.translate(this.matrix, x, y, z);\r\n        return this;\r\n    }\r\n\r\n    rotateY(rad: number) {\r\n        Matrix4.rotateY(this.matrix, rad);\r\n        return this;\r\n    }\r\n    rotateX(rad: number) {\r\n        Matrix4.rotateX(this.matrix, rad);\r\n        return this;\r\n    }\r\n    rotateZ(rad: number) {\r\n        Matrix4.rotateZ(this.matrix, rad);\r\n        return this;\r\n    }\r\n\r\n    vscale(vec3: Vector) {\r\n        Matrix4.scale(this.matrix, vec3.x, vec3.y, vec3.z);\r\n        return this;\r\n    }\r\n    scale(x: number, y: number, z: number) {\r\n        Matrix4.scale(this.matrix, x, y, z);\r\n        return this;\r\n    }\r\n\r\n    invert() {\r\n        Matrix4.invert(this.matrix);\r\n        return this;\r\n    }\r\n\r\n    //....................................................................\r\n    //Methods\r\n    //Bring is back to identity without changing the transform values.\r\n    resetRotation() {\r\n        for (let i = 0; i < this.matrix.length; i++) {\r\n            if (i >= 12 && i <= 14) continue;\r\n            this.matrix[i] = (i % 5 == 0) ? 1 : 0; //only positions 0,5,10,15 need to be 1 else 0.\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    //reset data back to identity.\r\n    resetMat() {\r\n        for (let i = 0; i < this.matrix.length; i++) this.matrix[i] = (i % 5 == 0) ? 1 : 0; //only positions 0,5,10,15 need to be 1 else 0.\r\n        return this;\r\n    }\r\n\r\n    //....................................................................\r\n    //Static Data Methods\r\n    static identity() {\r\n        let a = new Float32Array(16);\r\n        a[0] = a[5] = a[10] = a[15] = 1;\r\n        return a;\r\n    }\r\n\r\n    //from glMatrix\r\n    static perspective(out: Float32Array, fovy: number, aspect: number, near: number, far: number) {\r\n        let f = 1.0 / Math.tan(fovy / 2),\r\n            nf = 1 / (near - far);\r\n        out[0] = f / aspect;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = f;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = (far + near) * nf;\r\n        out[11] = -1;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = (2 * far * near) * nf;\r\n        out[15] = 0;\r\n    }\r\n\r\n\r\n    static ortho(out: Float32Array, left: number, right: number, bottom: number, top: number, near: number, far: number) {\r\n        let lr = 1 / (left - right),\r\n            bt = 1 / (bottom - top),\r\n            nf = 1 / (near - far);\r\n        out[0] = -2 * lr;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = -2 * bt;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = 2 * nf;\r\n        out[11] = 0;\r\n        out[12] = (left + right) * lr;\r\n        out[13] = (top + bottom) * bt;\r\n        out[14] = (far + near) * nf;\r\n        out[15] = 1;\r\n    };\r\n\r\n\r\n     /**\r\n   * Creates a lookAt matrix.\r\n   * This is a world matrix for a camera. In other words it will transform\r\n   * from the origin to a place and orientation in the world. For a view\r\n   * matrix take the inverse of this.\r\n   * @param {Float32Array} cameraPosition position of the camera\r\n   * @param {Vector3} target position of the target\r\n   * @param {Vector3} up direction\r\n   * @param {Float32Array} [dst] optional matrix to store result\r\n   * @return {Float32Array} dst or a new matrix if none provided\r\n   * @memberOf module:webgl-3d-math\r\n   */\r\n    static lookAt(cameraPosition: any, target:any, up:any, dst:any=null) {\r\n        dst = dst || new Float32Array(16);\r\n        var zAxis = Matrix4.normalize(Matrix4.subtractVectors(cameraPosition, target));\r\n        var xAxis = Matrix4.normalize(Matrix4.cross(up, zAxis));\r\n        var yAxis = Matrix4.normalize(Matrix4.cross(zAxis, xAxis));\r\n\r\n        dst[ 0] = xAxis[0];\r\n        dst[ 1] = xAxis[1];\r\n        dst[ 2] = xAxis[2];\r\n        dst[ 3] = 0;\r\n        dst[ 4] = yAxis[0];\r\n        dst[ 5] = yAxis[1];\r\n        dst[ 6] = yAxis[2];\r\n        dst[ 7] = 0;\r\n        dst[ 8] = zAxis[0];\r\n        dst[ 9] = zAxis[1];\r\n        dst[10] = zAxis[2];\r\n        dst[11] = 0;\r\n        dst[12] = cameraPosition[0];\r\n        dst[13] = cameraPosition[1];\r\n        dst[14] = cameraPosition[2];\r\n        dst[15] = 1;\r\n\r\n        return dst;\r\n    }\r\n\r\n    static subtractVectors(a:any, b:any, dst:any=null) {\r\n        dst = dst || new Float32Array(3);\r\n        dst[0] = a[0] - b[0];\r\n        dst[1] = a[1] - b[1];\r\n        dst[2] = a[2] - b[2];\r\n        return dst;\r\n    }\r\n\r\n    static cross(a:any, b:any, dst:any=null) {\r\n        dst = dst || new Float32Array(3);\r\n        dst[0] = a[1] * b[2] - a[2] * b[1];\r\n        dst[1] = a[2] * b[0] - a[0] * b[2];\r\n        dst[2] = a[0] * b[1] - a[1] * b[0];\r\n        return dst;\r\n    }\r\n\r\n    static normalize(v:any, dst:any=null) {\r\n        dst = dst || new Float32Array(3);\r\n        var length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\r\n        // make sure we don't divide by 0.\r\n        if (length > 0.00001) {\r\n            dst[0] = v[0] / length;\r\n            dst[1] = v[1] / length;\r\n            dst[2] = v[2] / length;\r\n        }\r\n        return dst;\r\n    }\r\n\r\n\r\n    //https://github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js\r\n    //make the rows into the columns\r\n    static transpose(out: Float32Array, a: Float32Array) {\r\n        //If we are transposing ourselves we can skip a few steps but have to cache some values\r\n        if (out === a) {\r\n            let a01 = a[1],\r\n                a02 = a[2],\r\n                a03 = a[3],\r\n                a12 = a[6],\r\n                a13 = a[7],\r\n                a23 = a[11];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a01;\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a02;\r\n            out[9] = a12;\r\n            out[11] = a[14];\r\n            out[12] = a03;\r\n            out[13] = a13;\r\n            out[14] = a23;\r\n        } else {\r\n            out[0] = a[0];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a[1];\r\n            out[5] = a[5];\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a[2];\r\n            out[9] = a[6];\r\n            out[10] = a[10];\r\n            out[11] = a[14];\r\n            out[12] = a[3];\r\n            out[13] = a[7];\r\n            out[14] = a[11];\r\n            out[15] = a[15];\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    //Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n    static normalMat3(out: Float32Array, a: Float32Array) {\r\n        let a00 = a[0],\r\n            a01 = a[1],\r\n            a02 = a[2],\r\n            a03 = a[3],\r\n            a10 = a[4],\r\n            a11 = a[5],\r\n            a12 = a[6],\r\n            a13 = a[7],\r\n            a20 = a[8],\r\n            a21 = a[9],\r\n            a22 = a[10],\r\n            a23 = a[11],\r\n            a30 = a[12],\r\n            a31 = a[13],\r\n            a32 = a[14],\r\n            a33 = a[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n            // Calculate the determinant\r\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) return null;\r\n\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        return out;\r\n    }\r\n\r\n    //....................................................................\r\n    //Static Operation\r\n\r\n    //https://github.com/gregtatum/mdn-model-view-projection/blob/master/shared/matrices.js\r\n    static multiplyVector(mat4: Float32Array, v: Float32Array) {\r\n        let x = v[0],\r\n            y = v[1],\r\n            z = v[2],\r\n            w = v[3];\r\n        let c1r1 = mat4[0],\r\n            c2r1 = mat4[1],\r\n            c3r1 = mat4[2],\r\n            c4r1 = mat4[3],\r\n            c1r2 = mat4[4],\r\n            c2r2 = mat4[5],\r\n            c3r2 = mat4[6],\r\n            c4r2 = mat4[7],\r\n            c1r3 = mat4[8],\r\n            c2r3 = mat4[9],\r\n            c3r3 = mat4[10],\r\n            c4r3 = mat4[11],\r\n            c1r4 = mat4[12],\r\n            c2r4 = mat4[13],\r\n            c3r4 = mat4[14],\r\n            c4r4 = mat4[15];\r\n\r\n        return [\r\n            x * c1r1 + y * c1r2 + z * c1r3 + w * c1r4,\r\n            x * c2r1 + y * c2r2 + z * c2r3 + w * c2r4,\r\n            x * c3r1 + y * c3r2 + z * c3r3 + w * c3r4,\r\n            x * c4r1 + y * c4r2 + z * c4r3 + w * c4r4\r\n        ];\r\n    }\r\n\r\n    //https://github.com/toji/gl-matrix/blob/master/src/gl-matrix/vec4.js, vec4.transformMat4\r\n    static transformVec4(out: Float32Array, v: number[], m: Float32Array) {\r\n        out[0] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12] * v[3];\r\n        out[1] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13] * v[3];\r\n        out[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3];\r\n        out[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3];\r\n        return out;\r\n    }\r\n\r\n    //From glMatrix\r\n    //Multiple two mat4 together\r\n    static mult(out: Float32Array, a: Float32Array, b: Float32Array) {\r\n        let a00 = a[0],\r\n            a01 = a[1],\r\n            a02 = a[2],\r\n            a03 = a[3],\r\n            a10 = a[4],\r\n            a11 = a[5],\r\n            a12 = a[6],\r\n            a13 = a[7],\r\n            a20 = a[8],\r\n            a21 = a[9],\r\n            a22 = a[10],\r\n            a23 = a[11],\r\n            a30 = a[12],\r\n            a31 = a[13],\r\n            a32 = a[14],\r\n            a33 = a[15];\r\n\r\n        // Cache only the current line of the second matrix\r\n        let b0 = b[0],\r\n            b1 = b[1],\r\n            b2 = b[2],\r\n            b3 = b[3];\r\n        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[4];\r\n        b1 = b[5];\r\n        b2 = b[6];\r\n        b3 = b[7];\r\n        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[8];\r\n        b1 = b[9];\r\n        b2 = b[10];\r\n        b3 = b[11];\r\n        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[12];\r\n        b1 = b[13];\r\n        b2 = b[14];\r\n        b3 = b[15];\r\n        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return out;\r\n    }\r\n\r\n\r\n    //....................................................................\r\n    //Static Transformation\r\n    static scale(out: Float32Array, x: number, y: number, z: number) {\r\n        out[0] *= x;\r\n        out[1] *= x;\r\n        out[2] *= x;\r\n        out[3] *= x;\r\n        out[4] *= y;\r\n        out[5] *= y;\r\n        out[6] *= y;\r\n        out[7] *= y;\r\n        out[8] *= z;\r\n        out[9] *= z;\r\n        out[10] *= z;\r\n        out[11] *= z;\r\n        return out;\r\n    };\r\n\r\n    static rotateY(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        // Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c - a20 * s;\r\n        out[1] = a01 * c - a21 * s;\r\n        out[2] = a02 * c - a22 * s;\r\n        out[3] = a03 * c - a23 * s;\r\n        out[8] = a00 * s + a20 * c;\r\n        out[9] = a01 * s + a21 * c;\r\n        out[10] = a02 * s + a22 * c;\r\n        out[11] = a03 * s + a23 * c;\r\n        return out;\r\n    }\r\n\r\n    static rotateX(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        // Perform axis-specific matrix multiplication\r\n        out[4] = a10 * c + a20 * s;\r\n        out[5] = a11 * c + a21 * s;\r\n        out[6] = a12 * c + a22 * s;\r\n        out[7] = a13 * c + a23 * s;\r\n        out[8] = a20 * c - a10 * s;\r\n        out[9] = a21 * c - a11 * s;\r\n        out[10] = a22 * c - a12 * s;\r\n        out[11] = a23 * c - a13 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotateZ(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7];\r\n\r\n        // Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c + a10 * s;\r\n        out[1] = a01 * c + a11 * s;\r\n        out[2] = a02 * c + a12 * s;\r\n        out[3] = a03 * c + a13 * s;\r\n        out[4] = a10 * c - a00 * s;\r\n        out[5] = a11 * c - a01 * s;\r\n        out[6] = a12 * c - a02 * s;\r\n        out[7] = a13 * c - a03 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotate(out: Float32Array, rad: number, axis: Float32Array) {\r\n        let x = axis[0],\r\n            y = axis[1],\r\n            z = axis[2],\r\n            len = Math.sqrt(x * x + y * y + z * z),\r\n            s, c, t,\r\n            a00, a01, a02, a03,\r\n            a10, a11, a12, a13,\r\n            a20, a21, a22, a23,\r\n            b00, b01, b02,\r\n            b10, b11, b12,\r\n            b20, b21, b22;\r\n\r\n        if (Math.abs(len) < 0.000001) {\r\n            return null;\r\n        }\r\n\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n\r\n        s = Math.sin(rad);\r\n        c = Math.cos(rad);\r\n        t = 1 - c;\r\n\r\n        a00 = out[0];\r\n        a01 = out[1];\r\n        a02 = out[2];\r\n        a03 = out[3];\r\n        a10 = out[4];\r\n        a11 = out[5];\r\n        a12 = out[6];\r\n        a13 = out[7];\r\n        a20 = out[8];\r\n        a21 = out[9];\r\n        a22 = out[10];\r\n        a23 = out[11];\r\n\r\n        // Construct the elements of the rotation matrix\r\n        b00 = x * x * t + c;\r\n        b01 = y * x * t + z * s;\r\n        b02 = z * x * t - y * s;\r\n        b10 = x * y * t - z * s;\r\n        b11 = y * y * t + c;\r\n        b12 = z * y * t + x * s;\r\n        b20 = x * z * t + y * s;\r\n        b21 = y * z * t - x * s;\r\n        b22 = z * z * t + c;\r\n\r\n        // Perform rotation-specific matrix multiplication\r\n        out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n        out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n        out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n    }\r\n\r\n    static invert(out: Float32Array, mat ? : Float32Array) {\r\n        if (mat === undefined) mat = out; //If input isn't sent, then output is also input\r\n\r\n        let a00 = mat[0],\r\n            a01 = mat[1],\r\n            a02 = mat[2],\r\n            a03 = mat[3],\r\n            a10 = mat[4],\r\n            a11 = mat[5],\r\n            a12 = mat[6],\r\n            a13 = mat[7],\r\n            a20 = mat[8],\r\n            a21 = mat[9],\r\n            a22 = mat[10],\r\n            a23 = mat[11],\r\n            a30 = mat[12],\r\n            a31 = mat[13],\r\n            a32 = mat[14],\r\n            a33 = mat[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n            // Calculate the determinant\r\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) return false;\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n        return true;\r\n    }\r\n\r\n    //https://github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js  mat4.scalar.translate = function (out, a, v) {\r\n    static translate(out: Float32Array, x: number, y: number, z: number) {\r\n        out[12] = out[0] * x + out[4] * y + out[8] * z + out[12];\r\n        out[13] = out[1] * x + out[5] * y + out[9] * z + out[13];\r\n        out[14] = out[2] * x + out[6] * y + out[10] * z + out[14];\r\n        out[15] = out[3] * x + out[7] * y + out[11] * z + out[15];\r\n    }\r\n}\r\n\r\nexport {\r\n    Vector3,\r\n    Matrix4\r\n}","import Geometry from './geometry'\r\nimport Texture from './Textures/texture'\r\nimport Vbuffer from './vbuffer'\r\nimport ShaderProgram from './shaderProgram'\r\nimport ObjLoader from './objLoader'\r\nimport { MeshData } from '@/entities'\r\nimport { GLSetttings } from '@/modules'\r\nimport { Camera } from './camera'\r\nimport { Matrix4 } from './math'\r\n\r\nclass ModelShader{\r\n\tconstructor(gl: WebGLRenderingContext, sceneViewCamera:Camera, lightViewCamera:Camera){\t\r\n\t\tconst vertexShader = `#version 300 es\r\n\t\t\tin vec3 a_position;\r\n\t\t\tin vec3 a_norm;\r\n\t\t\tin vec2 a_texCoord;\r\n\r\n\t\t\tuniform vec3 u_lightPosition;\r\n\t\t\tuniform vec3 u_cameraPosition;\r\n\r\n\t\t\tuniform mat4 u_modelMatrix;\r\n\t\t\tuniform mat4 u_cameraViewMatrix;\r\n\t\t\tuniform mat4 u_projectionMatrix;\r\n\r\n\t\t\tout vec3 v_normal;\r\n\t\t\tout vec3 v_surfaceToLight;\r\n\t\t\tout vec3 v_surfaceToCamera;\r\n\r\n\t\t\tout vec2 v_texCoord;\r\n\r\n\t\t\tvoid main(void){\r\n\r\n\t\t\t\tgl_Position = u_projectionMatrix * u_cameraViewMatrix * u_modelMatrix * vec4(a_position, 1.0);\r\n\t\t\t\tv_normal = (u_cameraViewMatrix * vec4(a_norm, 0.0)).xyz;\r\n\r\n\t\t\t\tvec3 v_surfaceWorldPosition = (u_modelMatrix * vec4(a_position, 1.0)).xyz;\r\n\t\t\t\tv_surfaceToLight = u_lightPosition - v_surfaceWorldPosition;\r\n\t\t\t\tv_surfaceToCamera = u_cameraPosition - v_surfaceWorldPosition;\r\n\r\n\t\t\t\tv_texCoord = a_texCoord;\r\n\r\n\t\t\t}`;\r\n\r\n\t\tconst fragmentShader = `#version 300 es\r\n\t\t\tprecision highp float;\r\n\r\n\t\t\tin vec2 v_texCoord;\r\n\t\t\tin vec3 v_normal;\r\n\t\t\tin vec3 v_surfaceToLight;\r\n\t\t\tin vec3 v_surfaceToCamera;\r\n\r\n\t\t\tuniform sampler2D sampler;\r\n\t\t\tuniform vec4 u_lightColor;\r\n\t\t\tuniform vec4 u_ambientLightColor;\r\n\t\t\tuniform vec4 u_specularColor;\r\n\t\t\tuniform float u_shininess;\r\n\t\t\tuniform float u_specularFactor;\r\n\r\n\t\t\tout vec4 finalColor;\r\n\r\n\t\t\tvoid main(void) {\r\n\r\n\t\t\t\tvec4 texel = texture(sampler, v_texCoord);\r\n\t\t\t\tvec3 normal = normalize(v_normal);\r\n\r\n\t\t\t\tvec3 surfaceToLightDirection = normalize(v_surfaceToLight);\r\n\t\t\t\tvec3 surfaceToCameraDirection = normalize(v_surfaceToCamera);\r\n\t\t\t\tvec3 halfVector = normalize(surfaceToLightDirection + surfaceToCameraDirection);\r\n\r\n\t\t\t\tfloat lightIntensity = dot(normal, surfaceToLightDirection);\r\n\t\t\t\tfloat specular = 0.0;\r\n\t\t\t\tif (lightIntensity > 0.0) {\r\n\t\t\t\t  specular = pow(dot(normal, halfVector), u_shininess);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvec4 diffuse = (u_ambientLightColor + u_lightColor) * lightIntensity;\r\n\t\t\t\tvec4 outColor = vec4(texel.rgb * diffuse.xyz, texel.a);\r\n\t\t\t\toutColor.rgb += specular;\r\n\r\n\t\t\t\tfinalColor = outColor;\r\n\t\t\t}`;\t\t\t\t\t\t\t\t\t\t\t\r\n\r\n\t\tconst shaderProgram = new ShaderProgram(gl, vertexShader, fragmentShader)\r\n\r\n\t\tshaderProgram.activateShader()\r\n\r\n\t\tthis.positionLoc = gl.getAttribLocation(shaderProgram.program as WebGLProgram, GLSetttings.ATTR_POSITION_NAME)\r\n\t\tthis.texCoordLoc = gl.getAttribLocation(shaderProgram.program as WebGLProgram, GLSetttings.ATTR_UV_NAME)\r\n\t\tthis.normalLoc = gl.getAttribLocation(shaderProgram.program as WebGLProgram, GLSetttings.ATTR_NORMAL_NAME)\r\n\r\n\t\tthis.modelMatrixLoc = gl.getUniformLocation(shaderProgram.program as WebGLProgram, GLSetttings.UNI_MODEL_MAT) as WebGLUniformLocation\r\n\t\tthis.perspectiveMatrixLoc = gl.getUniformLocation(shaderProgram.program as WebGLProgram, GLSetttings.UNI_PROJECTION_MAT) as WebGLUniformLocation\r\n\t\tthis.cameraViewMatrixLoc = gl.getUniformLocation(shaderProgram.program as WebGLProgram, GLSetttings.UNI_CAMERA_VIEW_MAT) as WebGLUniformLocation\r\n\t\tthis.projectedTextureLoc = gl.getUniformLocation(shaderProgram.program as WebGLProgram, GLSetttings.UNI_PROJECTED_TEXTURE) as WebGLUniformLocation\r\n\t\tthis.textureMatrixLoc = gl.getUniformLocation(shaderProgram.program as WebGLProgram, GLSetttings.UNI_TEXTURE_MAT) as WebGLUniformLocation\r\n\t\t\r\n\t\tthis.ambientLightColorLoc = gl.getUniformLocation(shaderProgram.program as WebGLProgram, GLSetttings.UNI_LIGHT_AMBIENT) as WebGLUniformLocation\r\n\t\tthis.lightPositionLoc = gl.getUniformLocation(shaderProgram.program as WebGLProgram, GLSetttings.UNI_LIGHT_POSITION) as WebGLUniformLocation\r\n\t\tthis.cameraPositionLoc = gl.getUniformLocation(shaderProgram.program as WebGLProgram, GLSetttings.UNI_CAMERA_POSITION) as WebGLUniformLocation\r\n\t\tthis.shininessLoc = gl.getUniformLocation(shaderProgram.program as WebGLProgram, GLSetttings.UNI_CAMERA_SHININESS) as WebGLUniformLocation\r\n\t\tthis.lightColorLoc = gl.getUniformLocation(shaderProgram.program as WebGLProgram, GLSetttings.UNI_LIGHT_COLOR) as WebGLUniformLocation\r\n\t\tthis.specularColorLoc = gl.getUniformLocation(shaderProgram.program as WebGLProgram, GLSetttings.UNI_SPECULAR_COLOR) as WebGLUniformLocation\r\n\t\tthis.specularFactorLoc = gl.getUniformLocation(shaderProgram.program as WebGLProgram, GLSetttings.UNI_SPECULAR_FACTOR) as WebGLUniformLocation\r\n\t\t//Cleanup\r\n\t\tshaderProgram.deactivateShader()\r\n\r\n\t\tthis.perspectiveProjectionMatrix = sceneViewCamera.perspectiveProjection\r\n\t\tthis.orthoProjectionMatrix = sceneViewCamera.orthoProjection\r\n\t\tthis.viewMatrix = sceneViewCamera.viewMatrix\r\n\t\tthis.lightViewCamera = lightViewCamera\r\n\t\tthis.sceneViewCamera = sceneViewCamera\r\n\t\tthis.shaderProgram = shaderProgram\r\n\t}\r\n\r\n\tpositionLoc: number\r\n\tnormalLoc: number\r\n\ttexCoordLoc: number\r\n  \r\n\tmodelMatrixLoc: WebGLUniformLocation\r\n\tperspectiveMatrixLoc: WebGLUniformLocation\r\n\tcameraViewMatrixLoc: WebGLUniformLocation\r\n\ttextureMatrixLoc: WebGLUniformLocation\r\n\t\r\n\tprojectedTextureLoc: WebGLUniformLocation\r\n\tambientLightColorLoc: WebGLUniformLocation\r\n\tlightPositionLoc: WebGLUniformLocation\r\n\tcameraPositionLoc: WebGLUniformLocation\r\n\tshininessLoc: WebGLUniformLocation\r\n\tlightColorLoc: WebGLUniformLocation\r\n\tspecularColorLoc: WebGLUniformLocation\r\n\tspecularFactorLoc: WebGLUniformLocation\r\n\r\n\tperspectiveProjectionMatrix: Float32Array\r\n\torthoProjectionMatrix: Float32Array\r\n\tviewMatrix: Float32Array\r\n\r\n\tlightViewCamera: Camera\r\n\tsceneViewCamera: Camera\r\n\r\n\tshaderProgram: ShaderProgram\r\n\r\n\r\n\tsetUniforms(gl:WebGLRenderingContext, model: Geometry) {\r\n\t\tthis.shaderProgram.activateShader()\r\n\r\n\t\tconst lightViewMatrix = this.getLightWorldMatrix(this.lightViewCamera, model) as Float32Array\r\n\r\n\t\tgl.uniformMatrix4fv(this.perspectiveMatrixLoc, false, this.perspectiveProjectionMatrix)\r\n\t\tgl.uniformMatrix4fv(this.cameraViewMatrixLoc , false, this.viewMatrix)\r\n\t\tgl.uniformMatrix4fv(this.modelMatrixLoc, false, model.transform.getModelMatrix())\r\n\t\tgl.uniform3fv(this.cameraPositionLoc, this.sceneViewCamera.transform.position.getFloatArray())\r\n\t\treturn this\r\n    }\r\n\r\n\tgetLightWorldMatrix(lightViewCamera:Camera, model:Geometry){\r\n\t\t// first draw from the POV of the light\r\n\t\treturn Matrix4.lookAt(\r\n\t\t\t[lightViewCamera.transform.position.x, lightViewCamera.transform.position.y, lightViewCamera.transform.position.z], // position\r\n\t\t\t[model.transform.position.x, model.transform.position.y, model.transform.position.z], // target\r\n\t\t\t[0, 1, 0],// up\r\n\t\t);\r\n\t}\r\n\r\n\tgetTextureMatrix(lightWorldMatrix:Float32Array){\r\n\t\tlet textureMatrix = Matrix4.identity();\r\n\t\tMatrix4.translate(textureMatrix, 0.5, 0.5, 0.5);\r\n\t\tMatrix4.scale(textureMatrix, 0.5, 0.5, 0.5);\r\n\t\tMatrix4.mult(textureMatrix, textureMatrix, this.orthoProjectionMatrix)\r\n\t\tlet inverted:any = []\r\n\t\tMatrix4.invert(inverted, lightWorldMatrix)\r\n\t\tMatrix4.mult(textureMatrix, textureMatrix, inverted)\r\n\t\treturn textureMatrix\r\n\t}\r\n}\r\n\r\n\r\nclass Model {\r\n\r\n  constructor() {}\r\n\r\n  static  createGeometry(gl: WebGLRenderingContext, shaderProgram: ModelShader, vertices: ObjLoader, texture: Texture){ \r\n    return  new Geometry(Model.createMesh(gl, shaderProgram, vertices, texture)); \r\n  }\r\n\r\n  static createMesh(gl: WebGLRenderingContext, shaderProgram: ModelShader, vertices: ObjLoader, texture: Texture) {\r\n\r\n    const vertexCount = vertices.vertexCount();\r\n\t\r\n    const mesh: MeshData = {\r\n      positions : new Vbuffer(gl, vertices.positions(), vertexCount, GLSetttings.BUFFER_TYPE_ARRAY),\r\n      normals: new Vbuffer(gl, vertices.normals(), vertexCount, GLSetttings.BUFFER_TYPE_ARRAY),\r\n      uvs: new Vbuffer(gl, vertices.uvs(), vertexCount, GLSetttings.BUFFER_TYPE_ARRAY),\r\n      texture,\r\n      drawMode : gl.TRIANGLES,\r\n      vertexCount,\r\n    }\r\n\r\n    mesh.positions?.bindToAttribute(shaderProgram.positionLoc as number, GLSetttings.DEFAULT_STRIDE, GLSetttings.DEFAULT_OFFSET)\r\n    mesh.normals?.bindToAttribute(shaderProgram.normalLoc as number, GLSetttings.DEFAULT_STRIDE, GLSetttings.DEFAULT_OFFSET)\r\n    mesh.uvs?.bindToAttribute(shaderProgram.texCoordLoc as number, GLSetttings.DEFAULT_STRIDE, GLSetttings.DEFAULT_OFFSET)\r\n\r\n    return mesh;\r\n  }\r\n}\r\n\r\nexport {\r\n\tModelShader,\r\n\tModel\r\n}","import { Normal, Vector, Surface, UV, Vertex } from \"@/entities\";\r\nimport { NEW_LINE, ObjTypes, BACKSLASH, SPACE, SurfaceStruct, Vec2Struct, Vec3Struct, VertexStruct } from \"@/modules\";\r\n\r\nexport default class ObjLoader {\r\n\r\n    constructor(surfaces: Array < Surface > ) {\r\n        this.surfaces = surfaces;\r\n    }\r\n\r\n    surfaces: Surface[] = [];\r\n\r\n    static parseOBJ(src: string) {\r\n\r\n        const POSITION = ObjTypes.V\r\n        const NORMAL = ObjTypes.VN\r\n        const UV = ObjTypes.VT\r\n        const SURFACE = ObjTypes.F\r\n\r\n        const lines = src.split(NEW_LINE);\r\n        const positions: Vector[] = [];\r\n        const uvs: UV[] = [];\r\n        const normals: Normal[] = [];\r\n        const surfaces: Surface[] = [];\r\n       \r\n        for(let item of lines){\r\n\r\n            const lineItems = item.trim().split(SPACE)\r\n            const type = lineItems[0]\r\n\r\n            if ( POSITION === type) {\r\n                // Add new vertex position\r\n                positions.push(Vec3Struct(parseFloat(lineItems[1]), parseFloat(lineItems[2]), parseFloat(lineItems[3])))\r\n            } else if (NORMAL  === type) {\r\n                // Add new vertex normal\r\n                normals.push(Vec3Struct(parseFloat(lineItems[1]), parseFloat(lineItems[2]), parseFloat(lineItems[3])))\r\n            } else if (UV === type) {\r\n                // Add new texture mapping point\r\n                uvs.push(Vec2Struct(parseFloat(lineItems[1]), 1 - parseFloat(lineItems[2])))\r\n            } else if (SURFACE === type) {\r\n                let isQuad = false\r\n                let shouldExit = false\r\n                let size = 4\r\n                // Add new face\r\n                const vertices: Vertex[] = [];\r\n\r\n                // conditionally detect and parse quads to triangle\r\n                for (let i = 1; i < size; i ++) {\r\n                    if (lineItems.length>size && !shouldExit) {\r\n                        size+=1\r\n                    }else if (i===4 && !isQuad) {\r\n                        i = 3\r\n                        size+=1\r\n                        isQuad = true\r\n                    }else if (i===5 && isQuad) {\r\n                        i=1\r\n                        isQuad = false\r\n                        shouldExit = true\r\n                    } else if(i===2 && shouldExit){\r\n                        break\r\n                    }\r\n                    const part = lineItems[i].split(BACKSLASH)\r\n                    const position = positions[parseInt(part[0]) - 1]\r\n                    const uv = uvs[parseInt(part[1]) - 1]\r\n                    const normal = normals[parseInt(part[2]) - 1]\r\n                    vertices.push(VertexStruct(position, normal, uv))\r\n                }\r\n                \r\n                // split tesselated quads as individual surfaces\r\n                if (vertices.length > 3) {\r\n                    const triagle1 = vertices.slice(0, 3)\r\n                    const triangle2 = vertices.slice(3)\r\n                    surfaces.push(SurfaceStruct(triagle1))\r\n                    surfaces.push(SurfaceStruct(triangle2))\r\n                }else{\r\n                    surfaces.push(SurfaceStruct(vertices))\r\n                }\r\n            }\r\n        }\r\n\r\n        return new ObjLoader(surfaces);\r\n    }\r\n\r\n    static async loadOBJ(url: string) {\r\n        const response = await fetch(url);\r\n        const data = await response.text()\r\n        const surfaces = ObjLoader.parseOBJ(data);\r\n        return surfaces;\r\n    }\r\n\r\n    vertexCount() {\r\n        return this.surfaces.length * 3;\r\n    }\r\n\r\n    positions() {\r\n        const result: number[] = [];\r\n        this.surfaces.forEach(function (surface: Surface) {\r\n            surface.vertices.forEach(function (vertex: Vertex) {\r\n                const v = vertex.position;\r\n                result.push(v.x, v.y, v.z);\r\n            })\r\n        })\r\n\r\n        return result;\r\n    }\r\n\r\n    normals() {\r\n        const result: number[] = [];\r\n        this.surfaces.forEach(function (surface: Surface) {\r\n            surface.vertices.forEach(function (vertex: Vertex) {\r\n                const v = vertex.normal;\r\n                result.push(v.x, v.y, v.z);\r\n            })\r\n        })\r\n\r\n        return result;\r\n    }\r\n\r\n    uvs() {\r\n        const result: number[] = [];\r\n        this.surfaces.forEach(function (surface: Surface) {\r\n            surface.vertices.forEach(function (vertex: Vertex) {\r\n                const v = vertex.uv;\r\n                result.push(v.x, v.y);\r\n            })\r\n        })\r\n\r\n        return result;\r\n    }\r\n}","import Geometry from '../../geometry';\r\nimport Vbuffer from '../../vbuffer';\r\nimport ShaderProgram from '../../shaderProgram';\r\nimport { MeshData } from '@/entities';\r\nimport { GLSetttings } from '@/modules';\r\nimport { Camera } from '../../camera';\r\n\r\nclass InfiniteGridShader{\r\n\tconstructor(gl: WebGLRenderingContext, camera:Camera){\t\r\n\t\tconst vertexShader = `#version 300 es\r\n            layout(location=5) in vec3 a_position;\r\n\r\n\t\t\tuniform mat4 u_cameraViewMatrix;\r\n\t\t\tuniform mat4 u_projectionMatrix;\r\n\r\n\t\t\tvec3 unprojectPoint(float x, float y, float z, mat4 view, mat4 projection) {\r\n                mat4 viewInv = inverse(view);\r\n                mat4 projInv = inverse(projection);\r\n                vec4 unprojectedPoint =  viewInv * projInv * vec4(x, y, z, 1.0);\r\n                return unprojectedPoint.xyz / unprojectedPoint.w;\r\n            }\r\n\r\n\t\t\tout vec3 nearPoint;\r\n\t\t\tout vec3 farPoint;\r\n\t\t\tout mat4 fragView;\r\n            out mat4 fragProj;\r\n\r\n\t\t\tout vec3 vertexPosition;\r\n\r\n\t\t\tvoid main(void){\r\n\t\t\t\tvec3 p = a_position;\r\n\r\n\t\t\t\tfragView = u_cameraViewMatrix;\r\n                fragProj = u_projectionMatrix;\r\n\t\t\t\tnearPoint = unprojectPoint(p.x, p.y, 0.0, u_cameraViewMatrix, u_projectionMatrix).xyz;\r\n\t\t\t\tfarPoint = unprojectPoint(p.x, p.y, 1.0, u_cameraViewMatrix, u_projectionMatrix).xyz;\r\n\r\n\t\t\t\tvertexPosition = p.xyz;\r\n\t\t\t\tgl_Position = vec4(p, 1.0);\r\n\r\n\t\t\t}`;\r\n\r\n\t\tconst fragmentShader = `#version 300 es\r\n\t\t\tprecision highp float;\r\n\r\n\t\t\tin vec3 vertexPosition;\r\n\t\t\tin vec3 nearPoint;\r\n            in vec3 farPoint;\r\n            in mat4 fragView;\r\n            in mat4 fragProj;\r\n\r\n\t\t\t// computes Z-buffer depth value, and converts the range.\r\n\t\t\tfloat computeDepth(vec3 pos) {\r\n\t\t\t\t// get the clip-space coordinates\r\n\t\t\t\tvec4 clip_space_pos = fragProj * fragView * vec4(pos.xyz, 1.0);\r\n\r\n\t\t\t\t// get the depth value in normalized device coordinates\r\n\t\t\t\tfloat clip_space_depth = clip_space_pos.z / clip_space_pos.w;\r\n\r\n\t\t\t\t// and compute the range based on gl_DepthRange settings (not necessary with default settings, but left for completeness)\r\n\t\t\t\tfloat far = gl_DepthRange.far;\r\n\t\t\t\tfloat near = gl_DepthRange.near;\r\n\r\n\t\t\t\tfloat depth = (((far-near) * clip_space_depth) + near + far) / 2.0;\r\n\r\n\t\t\t\t// and return the result\r\n\t\t\t\treturn depth;\r\n\t\t\t}\r\n\r\n\t\t\t\r\n\t\t\tvec4 grid(vec3 fragPos3D, float scale) {\r\n                vec2 coord = fragPos3D.xz * scale;\r\n                vec2 derivative = fwidth(coord);\r\n                vec2 grid = abs(fract(coord - 0.5) - 0.5) / derivative;\r\n                float line = min(grid.x, grid.y);\r\n                float minimumz = min(derivative.y, 1.0);\r\n                float minimumx = min(derivative.x, 1.0);\r\n\t\t\t\tvec3 gridColor = vec3(1.0 - min(line, 1.0));\r\n                vec4 color = vec4(gridColor, 1.0);\r\n                return color;\r\n            }\r\n\r\n            out vec4 finalColor;\r\n\r\n\t\t\tvoid main(void){\r\n\r\n                float t = -nearPoint.y / (farPoint.y - nearPoint.y);\r\n                vec3 fragPos3D = nearPoint + t * (farPoint - nearPoint);\r\n\t\r\n\t\t\t\tfloat isIntersect = (t > 0.0) ? 1.0 : 0.0;\r\n\t\t\t\tfloat linearFieldSection = 0.09 * length(fragPos3D.xz);\r\n\t\t\t\tfloat fading = min(1.0, 1.5 - linearFieldSection);\r\n\r\n\t\t\t\tvec4 gridPattern = grid(fragPos3D, 0.5);\r\n\t\t\t\t\r\n\t\t\t\tvec4 outColor = gridPattern;\r\n\r\n\t\t\t\tfinalColor = outColor * isIntersect;\r\n\t\t\t\tfinalColor *= fading;\r\n\r\n\t\t\t\tgl_FragDepth = computeDepth(fragPos3D);\r\n            }`;\t\t\t\t\t\t\t\t\t\t\r\n\r\n\t\tconst shaderProgram = new ShaderProgram(gl, vertexShader, fragmentShader);\r\n\r\n\t\tshaderProgram.activateShader()\r\n\r\n\t\tthis.positionLoc = gl.getAttribLocation(shaderProgram.program as WebGLProgram, GLSetttings.ATTR_POSITION_NAME)\r\n\r\n\t\tthis.perspectiveMatrixLoc = gl.getUniformLocation(shaderProgram.program as WebGLProgram, GLSetttings.UNI_PROJECTION_MAT) as WebGLUniformLocation\r\n\t\tthis.cameraViewMatrixLoc = gl.getUniformLocation(shaderProgram.program as WebGLProgram, GLSetttings.UNI_CAMERA_VIEW_MAT) as WebGLUniformLocation\r\n\t\tthis.uColorLoc = gl.getUniformLocation(shaderProgram.program as WebGLProgram, GLSetttings.UNI_COLOR) as WebGLUniformLocation\r\n\t\t//Cleanup\r\n\t\tshaderProgram.deactivateShader()\r\n\r\n\t\tthis.perspectiveProjectionMatrix = camera.perspectiveProjection\r\n\t\tthis.viewModelMatrix = camera.viewMatrix\r\n\t\tthis.shaderProgram = shaderProgram\r\n\t}\r\n\r\n\tpositionLoc: number\r\n  \r\n\tperspectiveMatrixLoc: WebGLUniformLocation\r\n\tcameraViewMatrixLoc: WebGLUniformLocation\r\n\r\n\tuColorLoc: WebGLUniformLocation\r\n\r\n\tperspectiveProjectionMatrix: Float32Array\r\n\tviewModelMatrix:Float32Array\r\n\r\n\tshaderProgram: ShaderProgram\r\n\r\n\t\r\n\tsetUniforms(gl:WebGLRenderingContext) {\r\n\t\tthis.shaderProgram.activateShader()\r\n\r\n\t\tgl.uniformMatrix4fv(this.perspectiveMatrixLoc, false, this.perspectiveProjectionMatrix)\r\n\t\tgl.uniformMatrix4fv(this.cameraViewMatrixLoc , false, this.viewModelMatrix)\r\n\r\n\t\treturn this\r\n    }\r\n}\r\n\r\n\r\nclass InfiniteGrid {\r\n\r\n  \tconstructor() {}\r\n\r\n   \tstatic createGeometry(gl: WebGLRenderingContext, shaderProgram: InfiniteGridShader){ \r\n    \treturn  new Geometry( InfiniteGrid.createMesh(gl, shaderProgram)); \r\n  \t}\r\n\r\n   static createMesh(gl: WebGLRenderingContext, shaderProgram: InfiniteGridShader) {\r\n\r\n\t\tconst verts = [\r\n\t\t\t1,-1,0,\r\n\t\t\t1,1,0,\r\n\t\t\t-1,-1,0,\r\n\t\t\t-1,1,0,\r\n\t\t\t-1,-1,0,\r\n\t\t\t1,1,0,\r\n\t\t]\r\n\r\n\t\tconst vertexCount = verts.length/3;\r\n\t\tconst strideLen = Float32Array.BYTES_PER_ELEMENT * 3; //Stride Length is the Vertex Size for the buffer in Bytes\r\n\t\tconst mesh: MeshData = {\r\n\t\t\tpositions : new Vbuffer(gl, verts, vertexCount, GLSetttings.BUFFER_TYPE_ARRAY),\r\n\t\t\tdrawMode : gl.TRIANGLES,\r\n\t\t\tvertexCount,\r\n\t\t}\r\n\r\n\t\tmesh.positions?.bindToAttribute(shaderProgram.positionLoc as number, strideLen, GLSetttings.DEFAULT_OFFSET, GLSetttings.GRID_VECTOR_SIZE);\r\n\r\n\t\treturn mesh;\r\n  \t}\r\n}\r\n\r\nexport {\r\n\tInfiniteGridShader,\r\n\tInfiniteGrid\r\n}","import AppLoader from \"@/app/components/core/appLoader\"\r\nimport { PATH_ASSETS_OBJ, PATH_ASSETS_TEXTURE, ProgramEntrySettings } from \"@/modules\"\r\nimport { Camera, CameraController } from \"./camera\"\r\nimport GLContext from \"./glContext\"\r\nimport Light from \"./light\"\r\nimport { Vector3 } from \"./math\"\r\nimport { Model, ModelShader } from \"./model\"\r\nimport ObjLoader from \"./objLoader\"\r\nimport { InfiniteGrid, InfiniteGridShader } from \"./primitives/grid/infiniteGrid\"\r\nimport Texture from \"./Textures/texture\"\r\n\r\nexport default class Scene {\r\n    constructor(){\r\n        (async()=>{\r\n            const appLoader = new AppLoader()\r\n            \r\n            const glContext = new GLContext(ProgramEntrySettings.WEBGL_CANVAS_ID)\r\n            const [wp, wh] = [0.95, 0.90]\r\n            glContext.fitScreen(wp, wh).setClearColor(13, 17, 23, 1.0).clear()\r\n            const gl = glContext.getContext() as WebGLRenderingContext\r\n\r\n            const lightPosition = new Vector3(0, 2.5, 3)\r\n            const light1 = new Light(lightPosition)\r\n            const lightViewCamera = new Camera(gl as WebGLRenderingContext)\r\n            lightViewCamera.transform.position.set(lightPosition.x, lightPosition.y, lightPosition.z)\r\n\r\n            const vertices = await ObjLoader.loadOBJ(PATH_ASSETS_OBJ)\r\n            const texture = await Texture.loadTexture(gl, PATH_ASSETS_TEXTURE)\r\n            \r\n            const camera = new Camera(gl as WebGLRenderingContext)\r\n            camera.transform.position.set(0, 0.5, 1.5)\r\n            new CameraController(gl as WebGLRenderingContext, camera)\r\n\r\n            const infiniteGridShader = new InfiniteGridShader(gl as WebGLRenderingContext, camera)\r\n            const infiniteGrid = InfiniteGrid.createGeometry(gl, infiniteGridShader)\r\n\r\n            const modelShader = new ModelShader(gl as WebGLRenderingContext, camera, lightViewCamera)\r\n            const model = Model.createGeometry(gl, modelShader, vertices, texture)\r\n            model.setScale(0.0035,0.0035,0.0035).setRotation(0,30,0)\r\n\r\n            appLoader.disable()\r\n\r\n            const loop = () => {\r\n\r\n                camera.updateViewMatrix()\r\n\r\n                infiniteGridShader.setUniforms(gl).shaderProgram\r\n                    .renderModel(infiniteGrid.preRender())\r\n\r\n                modelShader.setUniforms(gl, model.preRender())\r\n                    .shaderProgram.renderModel(model.preRender())\r\n\r\n                light1.setUniforms(gl, modelShader)\r\n\r\n                requestAnimationFrame(loop)\r\n            }\r\n            loop()\r\n        })()\r\n\r\n    }\r\n}","import Geometry from \"./geometry\"\r\n\r\nexport default class ShaderProgram {\r\n  constructor(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\r\n\r\n    const vertexShader = this.createShader(gl, gl.VERTEX_SHADER, vsSource) as WebGLShader\r\n    const fragmentShader = this.createShader(gl, gl.FRAGMENT_SHADER, fsSource) as WebGLShader\r\n    const shaderProgram = this.createShaderProgram(gl, fragmentShader, vertexShader)\r\n    this.program = shaderProgram\r\n    this.gl = gl\r\n  }\r\n\r\n  gl: WebGLRenderingContext | null = null\r\n  vertexShader: WebGLShader | null = null\r\n  fragmentShader: WebGLShader | null = null\r\n  program: WebGLProgram\r\n\r\n\r\n  createShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n    const shader = gl.createShader(type) as WebGLShader\r\n\r\n    // Send the source to the shader object\r\n    gl.shaderSource(shader, source)\r\n\r\n    // Compile the shader program\r\n    gl.compileShader(shader)\r\n\r\n    // See if it compiled successfully\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n      console.error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader))\r\n      gl.deleteShader(shader)\r\n      return null\r\n    }\r\n\r\n    return shader\r\n  }\r\n\r\n  createShaderProgram(gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram {\r\n\r\n    const program = gl.createProgram() as WebGLProgram\r\n\r\n    gl.attachShader(program, vertexShader)\r\n    gl.attachShader(program, fragmentShader)\r\n    gl.linkProgram(program)\r\n\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n      console.error(\"Error creating shader program.\", gl.getProgramInfoLog(program))\r\n      gl.deleteProgram(program)\r\n      throw new Error('Failed to link shaderProgram')\r\n    }\r\n\r\n    this.vertexShader = vertexShader\r\n    this.fragmentShader = fragmentShader\r\n\r\n    gl.detachShader(program, vertexShader)\r\n    gl.detachShader(program, fragmentShader)\r\n    gl.deleteShader(fragmentShader)\r\n    gl.deleteShader(vertexShader)\r\n\r\n    return program\r\n  }\r\n\r\n  activateShader() {\r\n    (this.gl as WebGLRenderingContext).useProgram(this.program)\r\n    return this\r\n  }\r\n\r\n  deactivateShader() {\r\n    (this.gl as WebGLRenderingContext).useProgram(null)\r\n    return this\r\n  }\r\n\r\n  dispose() {\r\n    //unbind the program if its currently active\r\n    if ((this.gl as WebGLRenderingContext).getParameter((this.gl as WebGLRenderingContext).CURRENT_PROGRAM) === this.program) {\r\n      this.deactivateShader()\r\n    }\r\n    (this.gl as WebGLRenderingContext).deleteProgram(this.program)\r\n  }\r\n\r\n  renderModel(model: Geometry) {\r\n    const gl = this.gl as WebGLRenderingContext\r\n    \r\n\t\tif(model.mesh.noCulling) gl.disable(gl.CULL_FACE)\r\n\t\tif(model.mesh.doBlending) gl.enable(gl.BLEND)\r\n\r\n\t\tgl.drawArrays(model.mesh.drawMode, 0, model.mesh.vertexCount)\r\n\r\n\t\t//Cleanup\r\n\t\tif(model.mesh.noCulling) gl.enable(gl.CULL_FACE)\r\n\t\tif(model.mesh.doBlending) gl.disable(gl.BLEND)\r\n\r\n\t\treturn this\r\n  }\r\n\r\n}","import { Matrix4, Vector3 } from \"./math\";\r\nimport { degToRad } from \"@/modules\";\r\n\r\nexport default class Transformation {\r\n\r\n    constructor() {\r\n\r\n        this.position = new Vector3(0, 0, 0)\r\n        this.scale = new Vector3(1, 1, 1) \r\n        this.rotation = new Vector3(0, 0, 0)\r\n        this.modelMatrix = new Matrix4()\r\n        this.normalMatrix = new Float32Array(9)\r\n\r\n        //Direction Vectors, Need 4 elements for math operations with matrices\r\n        this.forward = new Float32Array(4)      //When rotating, keep track of what the forward direction is\r\n        this.up = new Float32Array(4)           //what the up direction is, invert to get bottom\r\n        this.right = new Float32Array(4)        //what the right direction is, invert to get left\r\n    }\r\n\r\n    position: Vector3\r\n    scale: Vector3\r\n    rotation: Vector3\r\n    modelMatrix: Matrix4\r\n    normalMatrix: Float32Array\r\n    forward: Float32Array\r\n    up: Float32Array\r\n    right: Float32Array\r\n\r\n\r\n    updateMatrix() {\r\n        this.modelMatrix.resetMat() //Order is very important!!\r\n            .vtranslate(this.position)\r\n            .rotateX(degToRad(this.rotation.x))\r\n            .rotateY(degToRad(this.rotation.y))\r\n            .rotateZ(degToRad(this.rotation.z))\r\n            .vscale(this.scale);\r\n\r\n        //Calcuate the Normal Matrix which doesn't need translate, then transpose and inverses the mat4 to mat3\r\n        Matrix4.normalMat3(this.normalMatrix, this.modelMatrix.matrix);\r\n\r\n        //Determine Direction after all the transformations.\r\n        Matrix4.transformVec4(this.forward, [0, 0, 1, 0], this.modelMatrix.matrix) //Z\r\n        Matrix4.transformVec4(this.up, [0, 1, 0, 0], this.modelMatrix.matrix)      //Y\r\n        Matrix4.transformVec4(this.right, [1, 0, 0, 0], this.modelMatrix.matrix)   //X\r\n\r\n        return this.modelMatrix.matrix;\r\n    }\r\n\r\n    updateDirection() {\r\n        Matrix4.transformVec4(this.forward, [0, 0, 1, 0], this.modelMatrix.matrix)\r\n        Matrix4.transformVec4(this.up, [0, 1, 0, 0], this.modelMatrix.matrix)\r\n        Matrix4.transformVec4(this.right, [1, 0, 0, 0], this.modelMatrix.matrix)\r\n        return this\r\n    }\r\n\r\n    getModelMatrix() {\r\n        return this.modelMatrix.matrix\r\n    }\r\n\r\n    getNormalMatrix() {\r\n        return this.normalMatrix\r\n    }\r\n\r\n    reset() {\r\n        this.position.set(0, 0, 0)\r\n        this.scale.set(1, 1, 1)\r\n        this.rotation.set(0, 0, 0)\r\n    }\r\n}","import { GLSetttings } from \"@/modules\";\r\n\r\nexport default class Vbuffer {\r\n\r\n  constructor(gl: WebGLRenderingContext, data: number[], count: number, type:string) {\r\n    this.buffer = gl.createBuffer() as WebGLBuffer;\r\n\r\n    switch (type) {\r\n      case GLSetttings.BUFFER_TYPE_ARRAY:\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);\r\n        break;\r\n\r\n      case GLSetttings.BUFFER_TYPE_ELEMENT_ARRAY:\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data), gl.STATIC_DRAW);\r\n        break;\r\n    \r\n      default:\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);\r\n        break;\r\n    }\r\n\r\n\r\n    this.gl = gl;\r\n    this.size = data.length / count;\r\n  }\r\n\r\n  buffer: WebGLBuffer;\r\n  gl: WebGLRenderingContext;\r\n  size: number;\r\n\r\n\r\n  destroy() {\r\n    this.gl.deleteBuffer(this.buffer);\r\n  }\r\n\r\n  bindToAttribute(data: number|number[], stride: number, offset: number, size: number = this.size, type:string = GLSetttings.BUFFER_TYPE_VERTICES) {\r\n    const gl = this.gl\r\n    switch (type) {\r\n      case GLSetttings.BUFFER_TYPE_ARRAY:\r\n        gl.enableVertexAttribArray(data as number);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\r\n        gl.vertexAttribPointer(data as number, size, gl.FLOAT, false, stride, offset);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER,null);\r\n        break;\r\n\r\n      case GLSetttings.BUFFER_TYPE_ELEMENT_ARRAY:\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data as number[]), gl.STATIC_DRAW);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,null);\r\n        break;\r\n    \r\n      default:\r\n        gl.enableVertexAttribArray(data as number);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\r\n        gl.vertexAttribPointer(data as number, size, gl.FLOAT, false, stride, offset);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER,null);\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n\r\n}","import App from \"./app/app\"\r\n\r\nnew App()\r\n","import obj from '@/assets/resources/formula_1/source/formula_1.obj';\r\nimport texture from '@/assets/resources/formula_1/textures/formula_1.png';\r\n\r\nexport const TEXTURE = 'TEXTURE'\r\nexport const PATH_ASSETS_OBJ = obj\r\nexport const PATH_ASSETS_TEXTURE = texture\r\nexport const NEW_LINE = '\\n'\r\nexport const BACKSLASH = '/'\r\nexport const SPACE = /\\s+/\r\n\r\nexport enum ProgramEntrySettings {\r\n    WEBGL_CANVAS_ID = 'qrius-glCanvas',\r\n    WEBGL_CONTEXT = 'webgl2',\r\n    WEBGL_CONTEXT_EXPERIMENTAL = 'experimental-webgl',\r\n    WEBGL_CONTEXT_WEBKIT = 'webkit-3d',\r\n    WEBGL_CONTEXT_MOZ = 'moz-webgl',\r\n    WEBGL_DEPTH_TEXTURE = 'WEBGL_depth_texture',\r\n    WEBGL_CONTEXT_ERROR_MESSAGE = 'Could not initialise WebGL',\r\n    WEBGL_DEPTH_TEXTUR_ERROR_MESSAGE = 'need WEBGL_depth_texture',\r\n    PATH_ASSETS_OBJ = '/webgl-3d-renderer/assets/resources/formula_1/source/formula_1.obj',\r\n    PATH_ASSETS_TEXTURE = '/webgl-3d-renderer/assets/resources/formula_1/textures/formula_1.png',\r\n    DEPTH_TEXTURE_SIZE = 512,\r\n}\r\n\r\nexport enum CameraSettings {\r\n    NEAR_PLANE = 0.1,\r\n    FAR_PLANE = 100.0,\r\n    FIELD_OF_VIEW = 45,\r\n    MODE_FREE = 0,\r\n    MODE_ORBIT = 1,\r\n}\r\n\r\nexport enum CameraControlsSettings {\r\n    KEY_DOWN_EVENT = 'keydown',\r\n    KEY_UP_EVENT = 'keyup',\r\n    KEY_DOWN = 40,\r\n    KEY_UP = 38,\r\n    KEY_LEFT = 37,\r\n    KEY_RIGHT = 39,\r\n    MOUSE_UP = 'mouseup',\r\n    MOUSE_DOWN = 'mousedown',\r\n    MOUSE_WHEEL = 'mousewheel',\r\n    MOUSE_MOVE = 'mousemove',\r\n    ROTATION_RATE = -300,\r\n    PAN_RATE = 5,\r\n    ZOOM_RATE = 200,\r\n    TOUCH_START = 'touchstart',\r\n    TOUCH_MOVE = 'touchmove',\r\n    TOUCH_CANCEL = 'touchcancel',\r\n    TOUCH_END = 'touchend',\r\n}\r\n\r\nexport enum GLSetttings {\r\n    DEFAULT_OFFSET = 0,\r\n    DEFAULT_STRIDE = 0,\r\n    GRID_VECTOR_SIZE = 3,\r\n    GRID_VERTEX_LEN = 4,\r\n    ATTR_POSITION_NAME = \"a_position\",\r\n    ATTR_NORMAL_NAME = \"a_norm\",\r\n    ATTR_UV_NAME = \"a_texCoord\",\r\n    UNI_COLOR = 'u_color',\r\n    UNI_MODEL_MAT ='u_modelMatrix',\r\n    UNI_PROJECTION_MAT = 'u_projectionMatrix',\r\n    UNI_CAMERA_VIEW_MAT = 'u_cameraViewMatrix',\r\n    UNI_LIGHT_VIEW_CAMERA_MAT = 'u_lightViewCameraMatrix',\r\n    UNI_REVERSE_LIGHT_DIRECTION_MAT = 'u_reverseLightDirection',\r\n    UNI_TEXTURE_MAT = 'u_textureMatrix',\r\n    UNI_PROJECTED_TEXTURE = 'u_projectedTexture',\r\n    UNI_LIGHT_AMBIENT = 'u_ambientLightColor',\r\n    UNI_LIGHT_DIRECTION = 'u_lightDirection',\r\n    UNI_LIGHT_POSITION = 'u_lightPosition',\r\n    UNI_CAMERA_POSITION = 'u_cameraPosition',\r\n    UNI_CAMERA_SHININESS = 'u_shininess',\r\n    UNI_LIGHT_COLOR = 'u_lightColor',\r\n    UNI_SPECULAR_COLOR = 'u_specularColor',\r\n    UNI_SPECULAR_FACTOR = 'u_specularFactor',\r\n    BUFFER_TYPE_ELEMENT_ARRAY = 'array_elements',\r\n    BUFFER_TYPE_ARRAY = 'arrays',\r\n}\r\n\r\nexport enum ObjTypes {\r\n    V = 'v',\r\n    VN = 'vn',\r\n    VT = 'vt',\r\n    F = 'f',\r\n}\r\n","export * from './global_constants';\r\nexport * from './utils';\r\nexport * from './shaderProgram';","export const loadShaders = async (vsSource: string, fsSource: string) => {\r\n\r\n    const loadFile = async (src: string) => {\r\n        const response = await fetch(src)\r\n        const data = await response.text()\r\n        return data\r\n    }\r\n\r\n    const [vertexShaderFile, fragmentShaderFile] = await Promise.all([loadFile(vsSource), loadFile(fsSource)])\r\n\r\n    return {\r\n        vertexShaderFile,\r\n        fragmentShaderFile\r\n    };\r\n}","import { Normal, UV, Vector, Vertex } from \"@/entities\";\r\n\r\nexport const SurfaceStruct = (vertices: Array < Vertex > ) => ({ vertices })\r\nexport const VertexStruct = (position: Vector, normal: Normal, uv: UV) => ({ position, normal, uv })\r\nexport const Vec3Struct = (x: number, y: number, z: number) => ({ x, y, z })\r\nexport const Vec2Struct = (x: number, y: number) => ({ x, y })\r\nexport const radToDeg = (r: number) => r * 180 / Math.PI\r\nexport const degToRad = (d: number) => d * Math.PI / 180\r\nexport const normalize = (val:number, max:number, min:number)=>((val-min)/(max-min))\r\nexport const lerp = (norm:number, min:number, max:number)=>((norm*(max-min))+min)\r\nexport const normalizeRGB = ({ red, green, blue }:{red: number, green: number, blue: number})=>{\r\n\r\n    const rgb_8_bit = 255\r\n    const errorMessage = 'band out of range each value must be from 1 - 255'\r\n\r\n    if (red <= 0 ||red > rgb_8_bit) {\r\n        throw new Error(`value ${red} for red ${errorMessage}`);\r\n    } else if (green <= 0 ||green > rgb_8_bit) {\r\n        throw new Error(`value ${green} for green ${errorMessage}`);\r\n    }if (blue <= 0 ||blue > rgb_8_bit) {\r\n        throw new Error(`value ${blue} for blue ${errorMessage}`);\r\n    }\r\n\r\n    const alpha = 1\r\n    const result=[normalize(red, rgb_8_bit, 0), normalize(blue, rgb_8_bit, 0), normalize(green, rgb_8_bit, 0), alpha]\r\n    return new Float32Array(result)\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(24);\n"],"sourceRoot":""}